package download.automatico;






import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
//import java.util.ArrayList;
//import java.util.List;
import org.apache.log4j.BasicConfigurator;
//import org.openqa.selenium.By;
//import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
//import org.openqa.selenium.interactions.Actions;

// TORNAR EM ARQUIVO EXECUTÁVEL opções: Maven...?
public class Descartavel 
{
	public static void main(String[] args) 
	{
    	
		BasicConfigurator.configure();
        
        System.setProperty("webdriver.chrome.driver", "C:\\Users\\walyson.ferreira\\Desktop\\Programas-para-instalar\\chromedriver-win64\\chromedriver.exe");
        System.setProperty("webdriver.http.factory", "jdk-http-client");
        WebDriver driver = new ChromeDriver();

        try 
        {
            
            driver.get("https://www.caixa.gov.br/site/paginas/downloads.aspx#categoria_868");

            // Espera até que os links estejam visíveis (pode ser necessário ajustar dependendo da página)
            Thread.sleep(5000);  

            
            String[] estados = 
            {
                "AC", "AL", "AP", 
                "AM", "BA", "CE", 
                "DF", "ES", "GO", 
                "MA", "MT", "MS", 
                "MG", "PA", "PB", 
                "PR", "PE", "PI", 
                "RJ", "RN", "RS", 
                "RO", "RR", "SC", 
                "SP", "SE", "TO"
            };
            
             DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
	   		 LocalDateTime now = LocalDateTime.now();
	   		 System.out.println("Hora atual: " + dtf.format(now));
	   		 
	   		 // conversão de DateTime para String
	   		 String dataAtual = dtf.format(now);
	   		 // remoção das barras para espaços em branco
	   		 String mesAno = dataAtual.replaceAll("/", "");
	   		 // corte exato do mês e ano. Formato: "AAAAMM"
	   		 String anoMes = mesAno.substring(0, 6);
	   		 
            
            // Para cada estado, gera o link de download
            for(String estado : estados) 
            {
                // modelo de links para navegação e download
            	//String desoneradoLink = "https://www.caixa.gov.br/Downloads/sinapi-a-partir-jul-2009-" + estado + "/SINAPI_ref_Insumos_Composicoes_" + estado + "_202409_Desonerado.zip";
            	//String naoDesoneradoLink = "https://www.caixa.gov.br/Downloads/sinapi-a-partir-jul-2009-" + estado + "/SINAPI_ref_Insumos_Composicoes_" + estado + "_202409_NaoDesonerado.zip";
                String desoneradoLink = "https://www.caixa.gov.br/Downloads/sinapi-a-partir-jul-2009-" + estado + "/SINAPI_ref_Insumos_Composicoes_" + estado + "_" + anoMes + "_Desonerado.zip";
                String naoDesoneradoLink = "https://www.caixa.gov.br/Downloads/sinapi-a-partir-jul-2009-" + estado + "/SINAPI_ref_Insumos_Composicoes_" + estado + "_" + anoMes + "_NaoDesonerado.zip";
                
                
                // resgara a URL atual para verificar se a página existe ou não
                String urlAtual = driver.getCurrentUrl();
                System.out.println("LINK DA URL ATUAL: " + urlAtual);
                
                if(urlAtual.contains("PageNotFoundError"))
                {
                	break;
                }
                
                //Baixar os dois arquivos para cada estado
                //downloadFile(desoneradoLink);
                //downloadFile(naoDesoneradoLink);
                
                System.out.println("Hora atual: " + dtf.format(now)); 
                driver.get(desoneradoLink);
                Thread.sleep(5000);
                driver.get(naoDesoneradoLink);
                Thread.sleep(5000);

                //aviso de download 
                System.out.println("Arquivos baixados para o estado: " + estado);
                
                // Caminho da pasta onde procurar os arquivos
                String sourceDirectory = "C:\\Users\\walyson.ferreira\\Downloads\\"; // Substitua pelo caminho da pasta de origem
                // Caminho da pasta onde mover os arquivos
                String targetDirectory = "C:\\Users\\walyson.ferreira\\Desktop\\Relatórios\\"; // Substitua pelo caminho da pasta de destino
                // Nome do arquivo a ser procurado
                
                String fileNameToFind = ""; // Substitua pelo nome do arquivo a ser procurado
                
                int contador = 0;
                
                if(contador == 0)
                {
                	fileNameToFind = "Relat_rio Sint_tico de Composi__es de Custos";
                	contador++;
                } else if(contador == 1)
                {
                	fileNameToFind = "Relat_rio Sint_tico de Equipamentos";
                	contador++;
                } else if(contador == 2)
                {
                	fileNameToFind = "";
                }
                
                

                try 
                {
                    moveFiles(sourceDirectory, targetDirectory, fileNameToFind);
                } 
                catch (IOException e) 
                {
                    System.err.println("Ocorreu um erro: \n" + e.getMessage());
                    e.printStackTrace();
                }
                
                
            }
            System.out.println("Programa encerrado!");
        }
        catch(Exception e)
        {
        	System.out.println("ERRO: " + e);
        }
        // MOVER ARQUIVOS BAIXADOS

        
        
        
    }

	public static void moveFiles(String sourceDir, String targetDir, String fileNameToFind) throws IOException 
    {
        Path sourcePath = Paths.get(sourceDir);
        Path targetPath = Paths.get(targetDir);

        // Verifica se a pasta de destino existe, se não, cria
        if(!Files.exists(targetPath)) 
        {
            Files.createDirectories(targetPath);
        }

        // Percorre a árvore de diretórios e move os arquivos encontrados
        Files.walkFileTree(sourcePath, new SimpleFileVisitor<Path>() 
        {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException 
            {
                if (file.getFileName().toString().contains(fileNameToFind))
                {
                    Path targetFilePath = targetPath.resolve(file.getFileName());
                    Files.move(file, targetFilePath, StandardCopyOption.REPLACE_EXISTING);
                    System.out.println("Movido: " + file + " para " + targetFilePath);
                }
                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException e) throws IOException 
            {
                System.err.println("Falha ao visitar o arquivo: " + file + " - " + e.getMessage());
                return FileVisitResult.CONTINUE;
            }
        });
    }
	
}
